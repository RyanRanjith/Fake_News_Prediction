# -*- coding: utf-8 -*-
"""Fake_News_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqKfreFk55R8-WSKyK_pwaluZB7Eqllz

Importing Dependencies
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in english
print(stopwords.words('english'))

"""Data Pre-Processing"""

#loading dataset to a pandas DataFrame
news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

#Print firts five rows of dataframe
news_dataset.head()

#counting number of missing values in dataset
news_dataset.isnull().sum()

# replacing null values with empty string

news_dataset = news_dataset.fillna('')

#merging author name and news title
news_dataset['content'] = news_dataset['author']+' '+ news_dataset['title']

print(news_dataset['content'])

#seperating the data and labels
X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

print(X)
print(Y)

"""Stemming Procedure reeducing word to its root word"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

#seperating the data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

"""Splitting the dataset to training and test data"""

#converting text to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

#converting text to numerical data
print(X)

"""Spiltting dataset to training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,stratify=Y, random_state=2)

"""TRaining the model : Logistic regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Evaluation
Accuracy score
"""

#accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of training data:',training_data_accuracy)

#accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of testing data:',test_data_accuracy)

"""Making a Predictive System"""

X_new = X_test[0]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('News is Real')
else:
  print('News is fake')

print(Y_test[0])

